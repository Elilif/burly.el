#+TITLE: Burly.el

#+PROPERTY: LOGGING nil

# Note: This readme works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

# [[https://melpa.org/#/package-name][file:https://melpa.org/packages/burly-badge.svg]] [[https://stable.melpa.org/#/package-name][file:https://stable.melpa.org/packages/burly-badge.svg]]

This package provides tools to save and restore window configurations in Emacs, including buffers that may not be live anymore.  In this way, it's like a lightweight "workspace" manager, allowing you to easily restore a set of windows, their layout in a frame, and the buffers in them.

Internally it uses Emacs's bookmarks system to restore buffers to their previous contents and location.  This provides power and extensibility, since many major modes already integrate with Emacs's bookmarks system.  However, in case a mode's bookmarking function isn't satisfactory, Burly allows the user to customize buffer-restoring functions for specific modes.

For Org mode, Burly provides such custom functions so that narrowed and indirect Org buffers are properly restored, and headings are located by outline path in case they've moved since a bookmark was made (the [[https://github.com/alphapapa/org-bookmark-heading][org-bookmark-heading]] package also provides this through the Emacs bookmark system, but users may not have it installed, and the functionality is too useful to not include here by default).

Internally, buffers and window configurations are also encoded as URLs, and users may also save and open those URLs instead of using Emacs bookmarks.  (The name "Burly" comes from "buffer URL.")  For example, a URL to the =Installation/Quelpa= heading in this file, as I'm writing it, looks like this:

#+BEGIN_EXAMPLE
emacs+burly+file:///home/me/src/emacs/burly.el/README.org?pos=2651&outline-path=%28%22Installation%22%20%22Quelpa%22%29&relative-pos=308
#+END_EXAMPLE

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings
:END:
:CONTENTS:
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#changelog][Changelog]]
- [[#development][Development]]
- [[#credits][Credits]]
- [[#license][License]]
:END:

* Installation
:PROPERTIES:
:TOC:      :depth 0
:END:

** MELPA

Burly isn't on MELPA yet.

# If you installed from MELPA, you're done.  Just run one of the commands below.

** Quelpa

The easiest way is to install with [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]], like this:

#+BEGIN_SRC elisp
  (use-package burly
    :quelpa (burly :fetcher github :repo "alphapapa/burly.el"))
#+END_SRC

** Manual

1.  Install version 2.1 or later of the =map= library from GNU ELPA.
2.  Copy =burly.el= into a directory in your =load-path=, then ~(require 'burly)~.

* Usage
:PROPERTIES:
:TOC:      :depth 0
:END:

Most users will probably use Burly by bookmarking window configurations and accessing them with these commands:

+  =burly-bookmark-windows=: Bookmark the current frame's window configuration.
+  =burly-open-bookmark=: Select and open a Burly bookmark.

Burly bookmarks can also be opened with standard Emacs bookmark commands.

** Other commands

These commands work on URL strings:

  +  =burly-open-url=: Open a Burly URL (at point, or prompt for one), displaying the buffer(s) in the current window or frame.
  +  =burly-kill-buffer-url=: Copy the current buffer's URL to the kill ring.
  +  =burly-kill-window-url=: Copy the current frame's window configuration URL to the kill ring.

** Tips

+ You can customize settings in the =burly= group.

* Changelog
:PROPERTIES:
:TOC:      :depth 0
:END:

** 0.1-pre

Yet to be tagged.

* Development

Bug reports, feature requests, suggestions â€” /oh my/!

* Credits

Thanks to [[https://github.com/clemera][Clemens Radermacher]] and [[https://github.com/rswgnu][Robert Weiner]] for their suggestions.

* License

GPLv3.

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:

